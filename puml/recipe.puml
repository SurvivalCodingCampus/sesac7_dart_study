@startuml

package "Domain Layer" {
    class User {
        String id
        String email
        String password
        String name
        String? profileImageUrl
        List<String> savedRecipeIds # 레시피(찜) 리스트
    }
    note right of User : 앱 사용자의 기본 정보를\n나타내는 도메인 객체.

    class Recipe {
        String id
        String title
        String imageUrl
        String description
        List<Ingredient> ingredients
        List<Step> steps
        int cookTimeMinutes
        int servings # 인분
        String authorId # 작성자 ID
        double? averageRating
        int reviewCount
        String category
        bool isSavedByUser # 내가(사용자) 찜한 여부
    }
    note right of Recipe : 앱에서 제공하는 레시피의\n상세 정보.

    class Ingredient {
        String name
        String quantity
    }
    note right of Ingredient : 레시피에 필요한 각 재료의\n이름과 수량(좀 더 세분화가 필요할 수 있음)

    class Step {
        int stepNumber
        String description
        String? stepImageUrl
    }
    note right of Step : 레시피 조리에 대한 스텝(과정)

    class Review {
        String id
        String recipeId
        String userId
        String userName
        String? userProfileImageUrl
        int rating
        String comment
        DateTime timestamp
    }
    note top of Review : 사용자가 레시피에 대해 남기는\n평점과 댓글 정보

    class Notification {
        String id # 알림 ID
        String type # 알림의 종류("새로운 레시피", "리뷰" 등)
        String message
        DateTime timestamp
        bool isRead # 알림을 사용자가 읽었는지 여부
        String? relatedItemId # 알림과 관련된 항목의 ID(레시피 ID, 댓글 ID 등) 스킴에 포함될 상세정보
    }
    note bottom of Notification : 사용자에게 전송되는 알림의\n내용과 상태

    Recipe *-- Ingredient : 하나의 레시피에는 여러개의 재료를 포함할 수 있다.
    Recipe *-- Step : 하나의 레시피에는 여러 단계가 포함될 수 있다.
    Recipe <-- Review : 하나의 레시피는 리뷰를 가진다.
    User <-- Review : 하나의 유저는 여러리뷰를 작성할 수 있다.
    User <-- Notification : 하나의 유저는 여러 알림을 받을 수 있다.
}

package "Data Layer" {
    interface UserRepository {
        Future<User?> getUserById(String userId) # ID로 사용자 정보 조회
        Future<User?> getUserByEmail(String email) # 이메일로 사용자 정보 조회
        Future<void> createUser(User user) # 새로운 사용자 정보를 생성(회원가입)
        Future<void> updateUser(User user) # 기존 사용자 정보 수정
        Future<void> addSavedRecipe(String userId, String recipeId) # 레시피 목록 추가(찜)
        Future<void> removeSavedRecipe(String userId, String recipeId) # 저장된 레시피 목록에서 제거(찜)
    }
    note left of UserRepository : 사용자 데이터를\n관리하는 인터페이스입니다.

    interface RecipeRepository {
        Future<Recipe?> getRecipeById(String recipeId) # 단일 레시피 정보 조회
        Future<List<Recipe>> getSavedRecipes(String userId) # [userId]에 해당하는 사용자가 저장(찜)한 레시피 목록 조회
        Future<void> createRecipe(Recipe recipe) # 새로운 레시피 생성
        Future<void> updateRecipe(Recipe recipe) # 기존 레시피 수정
        Future<void> deleteRecipe(String recipeId) # [recipeId]에 해당하는 레시피 삭제
        Future<void> updateRecipeRating(String recipeId, double newAverageRating, int newReviewCount) # [recipeId]에 해당하는 레시피의 평균 별점과 리뷰 개수를 업데이트
    }
    note left of RecipeRepository : 레시피 데이터를\n관리하는 인터페이스입니다.

    interface ReviewRepository {
        Future<List<Review>> getReviewsForRecipe(String recipeId) # [recipeId]에 해당하는 레시피에 대한 모든 리뷰 조회
        Future<Review?> getReviewById(String reviewId) # [reviewId]에 해당하는 단일 리뷰를 조회
        Future<void> createReview(Review review) # 리뷰 생성
        Future<void> updateReview(Review review) # 기존 리뷰 업데이트
        Future<void> deleteReview(String reviewId) # 리뷰 삭제
    }
    note left of ReviewRepository : 레시피 리뷰 데이터를\n관리하는 인터페이스입니다.

    interface NotificationRepository {
        Future<List<Notification>> getNotificationsForUser(String userId) # 모든 내 알림 조회
        Future<void> createNotification(Notification notification) # 새로운 알림 생성
        Future<void> markNotificationAsRead(String notificationId) # 알림을 읽음 상태로 표시
        Future<void> deleteNotification(String notificationId) # 알림 삭제
    }
    note left of NotificationRepository : 사용자 알림 데이터를\n관리하는 인터페이스입니다.
}

UserRepository ..> User
RecipeRepository ..> Recipe
ReviewRepository ..> Review
NotificationRepository ..> Notification

' **여기서부터 Data Layer 내부의 레이아웃을 조정합니다.**
    ' UserRepository와 RecipeRepository를 나란히 배치
    RecipeRepository -[hidden]-> UserRepository : invisible
    ' ReviewRepository를 UserRepository 아래에 배치
    ReviewRepository -[hidden]down-> UserRepository : invisible
    ' NotificationRepository를 ReviewRepository 오른쪽에 배치 (UserRepository 아래, RecipeRepository 오른쪽)
    NotificationRepository -[hidden]right-> ReviewRepository : invisible
    NotificationRepository -[hidden]down-> RecipeRepository : invisible

@enduml